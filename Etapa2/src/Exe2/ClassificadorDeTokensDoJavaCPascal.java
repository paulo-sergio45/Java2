/* Generated By:JavaCC: Do not edit this line. ClassificadorDeTokensDoJavaCPascal.java */
package Exe2;
import java.io.*;

public class ClassificadorDeTokensDoJavaCPascal implements ClassificadorDeTokensDoJavaCPascalConstants {
  public static void main(String args []) throws ParseException
  {
    ClassificadorDeTokensDoJavaCPascal analisador = null;
    try
    {
      analisador = new ClassificadorDeTokensDoJavaCPascal(new FileInputStream("prog_fonte.my"));
      analisador.inicio();
    }
    catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo n\u00e3o encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro l\u00e9xico\u005cn" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sint\u00e1tico\u005cn" + e.getMessage());
    }
  }

  static final public void inicio() throws ParseException {
  char tipo;
  int qtdeOperadores = 0, qtdeNumeros = 0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGICO_PASCAL:
      case IDENT:
      case ATRIB:
      case IGUAL:
      case REAL:
      case NATURAIS:
      case HEXADECIMAL:
      case VARIAVEL:
      case OP_LOGICO_JAVA:
      case OP_RELACIONAL:
      case OP_RELACIONAL_JAVA:
      case OP_RELACIONAL_PASCAL:
      case ABRE_PARENTESES:
      case FECHA_PARENTESES:
      case ADICAO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case MODULO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      tipo = token();
      if (tipo == 'o')
      qtdeOperadores++;
      else if (tipo == 'n')
      qtdeNumeros++;
    }
    jj_consume_token(0);
    System.out.println("\u005cnTotal de:\u005cn" + qtdeNumeros + " numeros(s)\u005cn" + qtdeOperadores + " operador(es)");
  }

// retorna 'n' para número, 'o' para operador, 'v' para variável, ou 'p' para parênteses
  static final public char token() throws ParseException {
  Token t;
  String descricao;
  char tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
      t = jj_consume_token(REAL);
      descricao = "n\u00famero real";
      tipo = 'n';
      break;
    case NATURAIS:
      t = jj_consume_token(NATURAIS);
      descricao = "n\u00famero natural";
      tipo = 'n';
      break;
    case HEXADECIMAL:
      t = jj_consume_token(HEXADECIMAL);
      descricao = "n\u00famero hexadecimal";
      tipo = 'n';
      break;
    case VARIAVEL:
      t = jj_consume_token(VARIAVEL);
      descricao = "vari\u00e1vel";
      tipo = 'v';
      break;
    case OP_LOGICO_JAVA:
      t = jj_consume_token(OP_LOGICO_JAVA);
      descricao = "operador l\u00f3gico do JAVA/C";
      tipo = 'o';
      break;
    case OP_LOGICO_PASCAL:
      t = jj_consume_token(OP_LOGICO_PASCAL);
      descricao = "operador l\u00f3gico do PASCAL/C";
      tipo = 'o';
      break;
    case OP_RELACIONAL:
      t = jj_consume_token(OP_RELACIONAL);
      descricao = "operador relacional do JAVA/C/PASCAL";
      tipo = 'o';
      break;
    case OP_RELACIONAL_JAVA:
      t = jj_consume_token(OP_RELACIONAL_JAVA);
      descricao = "operador relacional do JAVA/C";
      tipo = 'o';
      break;
    case OP_RELACIONAL_PASCAL:
      t = jj_consume_token(OP_RELACIONAL_PASCAL);
      descricao = "operador relacional do PASCAL";
      tipo = 'o';
      break;
    case ABRE_PARENTESES:
      t = jj_consume_token(ABRE_PARENTESES);
      descricao = "abre par\u00eanteses";
      tipo = 'p';
      break;
    case FECHA_PARENTESES:
      t = jj_consume_token(FECHA_PARENTESES);
      descricao = "fecha par\u00eanteses";
      tipo = 'p';
      break;
    case ATRIB:
      t = jj_consume_token(ATRIB);
      descricao = "atribui\u00e7ao";
      tipo = 'o';
      break;
    case IGUAL:
      t = jj_consume_token(IGUAL);
      descricao = "igual a";
      tipo = 'o';
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
      descricao = "comentario";
      tipo = 'o';
      break;
    case ADICAO:
      t = jj_consume_token(ADICAO);
      descricao = "operadores aditivos";
      tipo = 'o';
      break;
    case SUBTRACAO:
      t = jj_consume_token(SUBTRACAO);
      descricao = "operadores SUBTRACAO";
      tipo = 'o';
      break;
    case MULTIPLICACAO:
      t = jj_consume_token(MULTIPLICACAO);
      descricao = "operadores MULTIPLICACAO";
      tipo = 'o';
      break;
    case DIVISAO:
      t = jj_consume_token(DIVISAO);
      descricao = "operadores DIVISAO";
      tipo = 'o';
      break;
    case MODULO:
      t = jj_consume_token(MODULO);
      descricao = "operadores MODULO";
      tipo = 'o';
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println(t.image + "\u005ct" + descricao);
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ClassificadorDeTokensDoJavaCPascalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fff7e0,0x1fff7e0,};
   }

  /** Constructor with InputStream. */
  public ClassificadorDeTokensDoJavaCPascal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ClassificadorDeTokensDoJavaCPascal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ClassificadorDeTokensDoJavaCPascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ClassificadorDeTokensDoJavaCPascal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ClassificadorDeTokensDoJavaCPascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ClassificadorDeTokensDoJavaCPascal(ClassificadorDeTokensDoJavaCPascalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ClassificadorDeTokensDoJavaCPascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
