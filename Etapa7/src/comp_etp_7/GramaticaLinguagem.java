/* Generated By:JavaCC: Do not edit this line. GramaticaLinguagem.java */
package comp_etp_7;
import java.io.*;

public class GramaticaLinguagem implements GramaticaLinguagemConstants {
  static Tabela tabela = new Tabela();

  public static void main(String args []) throws ParseException
  {
    GramaticaLinguagem analisador = null;
    try
    {
      analisador = new GramaticaLinguagem(new FileInputStream("Exemplo3.mon"));
      analisador.inicio();
      System.out.println(tabela.toString());
    }
    catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo n\u00e3o encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro l\u00e9xico\u005cn" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sint\u00e1tico\u005cn" + e.getMessage());
    }
  }

  static final public void inicio() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(INICIO);
      blocoComando();
      jj_consume_token(FIM);

    }
    jj_consume_token(0);

  }

  static final public void blocoComando() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_NUMERICO:
      case TIPO_TEXTO:
      case WHILE:
      case IF:
      case IMPRIMA:
      case VARIAVEL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        comandoIf();
        break;
      case WHILE:
        comandoWhile();
        break;
      case TIPO_NUMERICO:
      case TIPO_TEXTO:
      case IMPRIMA:
      case VARIAVEL:
        comandoLinha();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

  static final public void comandoLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_NUMERICO:
    case TIPO_TEXTO:
      declarar();
      break;
    case IMPRIMA:
      impressao();
      break;
    case VARIAVEL:
      atribuicao();

      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comandoWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESES);
    expressaoRelacao();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    blocoComando();
    jj_consume_token(FECHA_CHAVES);

  }

  static final public void comandoIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    expressaoRelacao();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    blocoComando();
    jj_consume_token(FECHA_CHAVES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(ABRE_CHAVES);
      blocoComando();
      jj_consume_token(FECHA_CHAVES);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }

  }

  static final public void atribuicao() throws ParseException {
    jj_consume_token(VARIAVEL);
    jj_consume_token(ATRIBUICAO);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERDADEIRO:
      case FALSO:
      case LEIA:
      case TEXTO:
      case NUMERO:
      case VARIAVEL:
      case OP_LOGICO_NEGACAO:
      case ABRE_PARENTESES:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERDADEIRO:
      case FALSO:
      case TEXTO:
      case NUMERO:
      case VARIAVEL:
      case OP_LOGICO_NEGACAO:
      case ABRE_PARENTESES:
        expressaoRelacao();
        break;
      case LEIA:
        entrada();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(FINAL_COMANDO);

  }

  static final public void entrada() throws ParseException {
    jj_consume_token(LEIA);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(TEXTO);
    jj_consume_token(FECHA_PARENTESES);

  }

  static final public void impressao() throws ParseException {
    jj_consume_token(IMPRIMA);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(TEXTO);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      expressaoRelacao();
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(FINAL_COMANDO);

  }

  static final public void declarar() throws ParseException {
   Simbolo simb;
  Token t;
  char tp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_TEXTO:
      jj_consume_token(TIPO_TEXTO);
                   tp='s';
      break;
    case TIPO_NUMERICO:
      jj_consume_token(TIPO_NUMERICO);
                      tp='n';
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(VARIAVEL);
     simb = new Simbolo(t.image,tp); tabela.inclui(simb);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(VARIAVEL);
      simb = new Simbolo(t.image,tp); tabela.inclui(simb);
    }
    jj_consume_token(FINAL_COMANDO);
  }

  static final public void expressaoRelacao() throws ParseException {
    termo();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGICO_OU:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(OP_LOGICO_OU);
      termo();

    }

  }

  static final public void termo() throws ParseException {
    termo1();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGICO_E:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(OP_LOGICO_E);
      termo1();

    }

  }

  static final public void termo1() throws ParseException {
    termo2();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_MAIOR_QUE:
      case OP_MAIOR_OU_IGUAL:
      case OP_MENOR_QUE:
      case OP_MENOR_OU_IGUAL:
      case OP_DIFERENTE:
      case OP_IGUALDADE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_IGUALDADE:
        jj_consume_token(OP_IGUALDADE);
        termo2();

        break;
      case OP_DIFERENTE:
        jj_consume_token(OP_DIFERENTE);
        termo2();

        break;
      case OP_MAIOR_QUE:
        jj_consume_token(OP_MAIOR_QUE);
        termo2();

        break;
      case OP_MENOR_QUE:
        jj_consume_token(OP_MENOR_QUE);
        termo2();

        break;
      case OP_MAIOR_OU_IGUAL:
        jj_consume_token(OP_MAIOR_OU_IGUAL);
        termo2();

        break;
      case OP_MENOR_OU_IGUAL:
        jj_consume_token(OP_MENOR_OU_IGUAL);
        termo2();

        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

  static final public void termo2() throws ParseException {
    termo3();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADICAO:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      jj_consume_token(ADICAO);
      termo3();

    }

  }

  static final public void termo3() throws ParseException {
    termo4();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBTRACAO:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      jj_consume_token(SUBTRACAO);
      termo4();

    }

  }

  static final public void termo4() throws ParseException {
    termo5();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
      jj_consume_token(MULTIPLICACAO);
      termo5();

    }

  }

  static final public void termo5() throws ParseException {
    termo6();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVISAO:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
      jj_consume_token(DIVISAO);
      termo6();

    }

  }

  static final public void termo6() throws ParseException {
    termo7();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_13;
      }
      jj_consume_token(MODULO);
      termo7();

    }

  }

  static final public void termo7() throws ParseException {
    termo8();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_14;
      }
      jj_consume_token(POTENCIA);
      termo8();

    }

  }

  static final public void termo8() throws ParseException {
int cont =0;
Token t=null;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGICO_NEGACAO:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_15;
      }
      t = jj_consume_token(OP_LOGICO_NEGACAO);
                               cont++;
    }
    fator();
 if(t!=null && (cont %2 != 0)) {

  }
  }

  static final public void fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERDADEIRO:
      jj_consume_token(VERDADEIRO);

      break;
    case NUMERO:
      jj_consume_token(NUMERO);

      break;
    case FALSO:
      jj_consume_token(FALSO);

      break;
    case VARIAVEL:
      jj_consume_token(VARIAVEL);

      break;
    case TEXTO:
      jj_consume_token(TEXTO);

      break;
    case ABRE_PARENTESES:
      jj_consume_token(ABRE_PARENTESES);
      expressaoRelacao();
      jj_consume_token(FECHA_PARENTESES);


      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GramaticaLinguagemTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x848700,0x848700,0x840300,0x10000,0x10aa6000,0x10aa6000,0x0,0x300,0x0,0x8000000,0x4000000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0xa86000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x2000,0x0,0x2000,0x0,0x0,0x7,0x7,0x80,0x100,0x200,0x400,0x800,0x8000,0x0,0x8,};
   }

  /** Constructor with InputStream. */
  public GramaticaLinguagem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GramaticaLinguagem(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaLinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GramaticaLinguagem(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaLinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GramaticaLinguagem(GramaticaLinguagemTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaLinguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
